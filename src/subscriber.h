/**
 * @brief Файл содержит описание шаблонного класса "Подписчик" (subscriber).
 * @author Владимир Лазарев solock@mail.ru
 */

#pragma once

namespace z80 {
  /**
   * @brief Шаблон класса subscriber. Обеспечивает интерфейс Подписчика на событие.
   * @tparam T Тип, с которым работает класс.
   * @details Интерфейс Подписчика заключается в получении:
   * - новых значений,
   * - оповещения об отписке со стороны Издателя.
   */
  template<typename T>
  class subscriber {
  public:
    /**
    * @brief Псевдоним типа, с которым работает шаблон.
    * @details Используется - где потребуется. Например, асинхронная обёртка subscriberAsyncWrapper типизирует свою
    * внутреннюю очередь сообщений этим типом.
    */
    using MessageType [[maybe_unused]] = T;

    /**
     * @brief Деструктор полиморфного класса. Достаточно реализации по-умолчанию.
     */
    virtual ~subscriber() = default;

    /**
     * @brief Оповещение подписчика о значении.
     * @param data Значение, присланное издателем.
     */
    virtual void update(const T& data) = 0;

    /**
     * @brief Оповещение подписчика об отписке от издателя.
     * @details Этот функционал может быть интересен далеко не всем наследникам, поэтому эта функция не чистая
     * виртуальная, а с реализацией по-умолчанию. По-умолчанию - не делает ничего.
     */
    virtual void unsubscribed() {};
  };
}