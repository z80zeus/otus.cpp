/**
 * @brief Файл содержит описание класса z80::semaphore, отсутствующего в стандартной библиотеке.
 * @author Владимир Лазарев solock@mail.ru
 */
#pragma once

#include <condition_variable>
#include <mutex>

namespace z80 {
  /**
   * @brief Класс реализует функционал семафорной синхронизации потоков выполнения.
   * @details Работа класса построена на использовании мьютекса, условной переменных и счётчика post/wait-вызовов.
   * Каждый вызов post увеличивает счётчик. Потоки, вызывающие post не блокируются никогда.
   * Каждый вызов wait - уменьшает счётчик. Потоки, вызывающие wait блокируются только если значение счётчика семафора
   * равно нулю уже при вызове функции wait.
   */
  class semaphore {
    public:

    /**
     * @brief Конструктор создаёт семафор с предустановленным значением счётчика.
     * @param count Предустановленное значение семафора. По-умолчанию - 0.
     */
    explicit semaphore (std::size_t count = 0): count_{count} {}

    /**
     * @brief Функция взведения семафора.
     * @details Увеличивает внутренний счётчик семафора и оповещает об этом заблокированные потоки.
     * @param inc Величина на которую будет увеличен внутренний счётчик семафора. По-умолчанию 1.
     */
    inline void post(std::size_t inc = 1) {
      std::unique_lock<std::mutex>  locker(mtx);
      count_ += inc;
      cv.notify_one();
    }

    /**
     * @brief Функция ожидания взведения семафора.
     * @details Если внутренний счётчик не равен нулю - уменьшает его и возвращает управление.
     * В противном случае - блокируется до взведения семафора (вызова функции post).
     */
    inline void wait() {
      std::unique_lock<std::mutex> locker(mtx);
      cv.wait(locker, [this](){ return count_ > 0; });
      --count_;
    }

    private:
    /**
     * @brief Условная переменная для синхронизации потоков: заблокированных и разблокирующих.
     */
    std::condition_variable cv;

    /**
     * @brief Мьютекс для блокировки потоков на нулевом счётчике.
     */
    std::mutex              mtx;

    /**
     * @brief Счётчик post/wait-вызовов.
     */
    std::size_t             count_ = 0;
  };
}
