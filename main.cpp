/**
 * @brief Самостоятельная работа otus.c++.5: Команды.
 * @author Владимир Лазарев solock@mail.ru
 * @details
 * Задание 6
 * Разработать программу для пакетной обработки команд.
 * Команды считываются построчно из стандартного ввода и обрабатываются блоками по N команд.
 * Одна команда - одна строка, конкретное значение роли не играет. Если данные закончились - блок завершается
 * принудительно.
 * Параметр N передается как единственный параметр командной строки в виде целого числа.
 * Размер блока можно изменить динамически, если перед началом блока и сразу после дать команды `{` и `}` соответственно.
 * Предыдущий пакет при этом принудительно завершается.
 * Такие блоки могут быть включены друг в друга при этом вложенные команды `{` и `}` игнорируются (но не сами блоки).
 * Если данные закончились внутри динамического блока, весь динамический блок игнорируется.
 * Вместе с выводом в консоль блоки должны сохранятся в отдельные файлы с именами bulk1517223860.log ,
 * где 1517223860 - это время получения первой команды из блока. По одному файлу на блок.
 * Требования к реализации:
 * Бинарный файл должен называться bulk
 * Проверка:
 * Задание считается выполненным успешно, если после установки пакета и запуска с тестовыми данными вывод соответствует
 * описанию. Данные подаются на стандартный вход построчно с паузой в 1 секунду для визуального контроля.
 * Будет отмечена низкая связанность обработки данных, накопления пачек команд, вывода в консоль и сохранения в файлы.
 * Рекомендуется применить паттерны: Наблюдатель, Стратегия, возможно - Состояние.
 * Ремоендуется тщательно спроектировать архитектуру, т.к. в дальнейшем эта же задача будет ставиться в заданиях на
 * многопоточное, асинронное и сетевое программирование - и было бы хорошо применять заложенную архитектуру с
 * минимальными изменениями.
 */

#include "commandStateMachine.h"
#include "commandStateMachineStateIdle.h"
#include "commandBlockFiler.h"
#include "commandBlockPrinter.h"
#include "publisherCommandsFromStream.h"

#include <memory>   // std::shared_ptr, std::make_shared

using namespace std;
using namespace z80;

int main() {
  publisherCommandsFromStream commandSrc(cin);
  commandStateMachine         commandMachine;
  commandBlockPrinter         commandPrinter(cout);
  commandBlockFiler           commandFiler;

  commandSrc.subscribe(commandMachine);
  commandMachine.subscribe(commandPrinter);
  commandMachine.subscribe(commandFiler);

  commandSrc.start();
  return 0;
}
