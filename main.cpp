/**
 * @brief Otus. Самостоятельная работа 1.2.Фильтр IP-адресов
 * @author Vladimir Lazarev solock@mail.ru
 * @details Программа построчно читает данные из стандартного ввода.
 * Каждая строка состоит из трёх полей, разделённых одним символом табуляции и завершается символом конца строки.
 * Формат строки:
 * text1 \t text2 \t text3 \n
 * Поля text2 и text3 - игноируются. Поле text1 имеет следующую структуру (ip4 address):
 * n1.n2.n3.n4
 * где n1..4 – целое число от 0 до 255.
 * Требуется загрузить список ip-адресов в память и отсортировать их в обратном лексикографическом порядке.
 * Пример лексикографической сортировки (по первому числу, затем по второму и так далее):
 * 1.1.1.1
 * 1.2.1.1
 * 1.10.1.1
 * Соответственно, обратная:
 * 1.10.1.1
 * 1.2.1.1
 * 1.1.1.1
 * Далее выводим в стандартный вывод следующее:
 * 1. Полный список адресов после сортировки. Одна строка - один адрес.
 * 2. Сразу следом список адресов, первый байт которых равен 1. Порядок сортировки не меняется.
 *    Одна строка - один адрес. Списки ничем не разделяются.
 * 3. Сразу продолжается список адресов, первый байт которых равен 46, а второй 70. Порядок сортировки не меняется.
 *    Одна строка - один адрес. Списки ничем не разделяются.
 * 4. Сразу продолжается список адресов, любой байт которых равен 46. Порядок сортировки не меняется.
 *    Одна строка - один адрес. Списки ничем не разделяются.
 *
 * Требования к реализации
 * В приложенном к заданию исходном файле необходимо заменить, где это возможно, конструкции на аналогичные
 * из стандарта С++14. Реализовать недостающий функционал.
 * Лишний раз проверьте
 * 1. лексикографическая сортировка понятна как для строки, так и для контейнера.
 * 2. выбрана соответствующая задаче структура данных.
 *
 * Самопроверка
 * Макет исходного кода, а также тестовый файл с данными ip_filter.tsv прилагается к материалам
 * занятия. Проверить себя можно следующим образом:
 * cat ip_filter.tsv | ip_filter | md5sum
 * 24e7a7b2270daee89c64d3ca5fb3da1a -
 */

#include <cassert>
#include <cstdlib>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

// ("",  '.') -> [""]
// ("11", '.') -> ["11"]
// ("..", '.') -> ["", "", ""]
// ("11.", '.') -> ["11", ""]
// (".11", '.') -> ["", "11"]
// ("11.22", '.') -> ["11", "22"]
vector<uint8_t> convert2ip(const string &str, char d)
{
    vector<uint8_t> r;

    auto stop = str.find_first_of(d);
    decltype(stop) start = 0;

    while(stop != string::npos)
    {
        r.push_back(stoi(str.substr(start, stop - start)));

        start = stop + 1;
        stop = str.find_first_of(d, start);
    }

    r.push_back(stoi(str.substr(start)));

    return r;
}

int main(/*int argc, char const *argv[]*/)
{
    try {
        vector <vector<uint8_t>> ip_pool;

        for (string line; getline(cin, line);)
            ip_pool.push_back(convert2ip(line.substr(0, line.find_first_of('\t')), '.'));

        // TODO reverse lexicographically sort
 /*
        for(auto ip = cbegin(ip_pool); ip != cend(ip_pool); ++ip)
        {
            for(auto ip_part = cbegin(*ip); ip_part != cend(*ip); ++ip_part)
            {
                if (ip_part != ip->cbegin())
                    cout << ".";
                cout << *ip_part;
            }
            cout << endl;
        }
*/
        // 222.173.235.246
        // 222.130.177.64
        // 222.82.198.61
        // ...
        // 1.70.44.170
        // 1.29.168.152
        // 1.1.234.8

        // TODO filter by first byte and output
        // ip = filter(1)

        // 1.231.69.33
        // 1.87.203.225
        // 1.70.44.170
        // 1.29.168.152
        // 1.1.234.8

        // TODO filter by first and second bytes and output
        // ip = filter(46, 70)

        // 46.70.225.39
        // 46.70.147.26
        // 46.70.113.73
        // 46.70.29.76

        // TODO filter by any byte and output
        // ip = filter_any(46)

        // 186.204.34.46
        // 186.46.222.194
        // 185.46.87.231
        // 185.46.86.132
        // 185.46.86.131
        // 185.46.86.131
        // 185.46.86.22
        // 185.46.85.204
        // 185.46.85.78
        // 68.46.218.208
        // 46.251.197.23
        // 46.223.254.56
        // 46.223.254.56
        // 46.182.19.219
        // 46.161.63.66
        // 46.161.61.51
        // 46.161.60.92
        // 46.161.60.35
        // 46.161.58.202
        // 46.161.56.241
        // 46.161.56.203
        // 46.161.56.174
        // 46.161.56.106
        // 46.161.56.106
        // 46.101.163.119
        // 46.101.127.145
        // 46.70.225.39
        // 46.70.147.26
        // 46.70.113.73
        // 46.70.29.76
        // 46.55.46.98
        // 46.49.43.85
        // 39.46.86.85
        // 5.189.203.46
    }
    catch(const exception &e)
    {
        cerr << e.what() << endl;
    }

    return 0;
}
